///////////////////////////////////////////////////////////////////
//
// Модуль помощник, для генерации описаний метаданных 1с
//
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////

// Формирует служебные параметры необходимые для дальнейшей работы генератора
//
// Параметры:
//   ВерсияПлатформы - Строка - Версия платформы 1с под которую создается описание
//   ГенерацияРасширения - Булево - Флаг создания расширения
//
//  Возвращаемое значение:
//   ФиксированнаяСтруктура - Служебные параметры генератора
//
Функция СоздатьПараметрыГенерации(ВерсияПлатформы, ГенерацияРасширения) Экспорт
	
	Если Лев(ВерсияПлатформы, 6) = "8.3.10" Тогда
		
		ВерсияВыгрузки = "2.4";
		
	Иначе
		
		ВызватьИсключение "Неизвестная версия платформы";
		
	КонецЕсли;
	
	ПараметрыГенерации = Новый Структура();
	ПараметрыГенерации.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	ПараметрыГенерации.Вставить("ВерсияВыгрузки", ВерсияВыгрузки);
	ПараметрыГенерации.Вставить("ГенерацияРасширения", ГенерацияРасширения = Истина);
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыГенерации);
	
КонецФункции

// Метод создает базовое описание корневого объекта, в которое потом можно добавлять объекты и т.д.
//
// Параметры:
//	ОписаниеРасширения - Структура - Описание расширения, наименование синоним и прочее
//	ТипОбъекта - Строка - Тип объекта конфигурации, см ТипыОбъектовКонфигурации, ОбъектыКонфигурации.md
//	ИмяФайла - Строка - Имя файла описания объекта, в который будут записаны данные
//	ПараметрыГенерации - Структура - Общие данные/настройки необходимые для генерации 
//
Функция СоздатьОписаниеКорневогоОбъекта(ОписаниеРасширения, ТипОбъекта, ИмяФайла, ПараметрыГенерации) Экспорт
	
	ЗаписьConfiguration = СоздатьЗапись("Configuration", ПараметрыГенерации, ИмяФайла);
	
	ЗаписьConfiguration.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Для Каждого uid из ГенераторОписанийОбщий.ПолучитьUIDДляГенерацииРасширения() Цикл
		
		ЗаписьConfiguration.ЗаписатьНачалоЭлемента("xr:ContainedObject");
		ОбработкаXML.ЗаписатьЗначениеXML(ЗаписьConfiguration, "xr:ClassId", uid);
		ОбработкаXML.ЗаписатьЗначениеXML(ЗаписьConfiguration, "xr:ObjectId", Строка(Новый УникальныйИдентификатор()));
		ЗаписьConfiguration.ЗаписатьКонецЭлемента(); // xr:ContainedObject
		
	КонецЦикла;
	
	ЗаписьConfiguration.ЗаписатьКонецЭлемента(); // InternalInfo
	
	ЗаписатьСвойства(ЗаписьConfiguration, ТипОбъекта, ОписаниеРасширения);
	
	ЗаписьConfiguration.ЗаписатьНачалоЭлемента("ChildObjects");
	
	Возврат ЗаписьConfiguration;

КонецФункции

// Записывает описание объекта в поток
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   ТипОбъекта - Строка - Тип объекта конфигурации, см ТипыОбъектовКонфигурации, ОбъектыКонфигурации.md
//   СвойстваОбъекта - Структура - Данные объекта
//
Процедура ЗаписатьСвойства(Запись, ТипОбъекта, СвойстваОбъекта) Экспорт
	
	Запись.ЗаписатьНачалоЭлемента("Properties");
	
	ГенераторОписанийОбщий.ЗаписатьДанные(Запись, СвойстваОбъекта, ТипОбъекта, ЭтотОбъект);
	
	Запись.ЗаписатьКонецЭлемента(); // Properties
	
КонецПроцедуры

// Метод регистрирует в конфигурации объект метаданных.
// Проверок на существование объекта нет
//
// Параметры:
//  ОбъектКонфигурации - СтрокаТаблицыЗначений - Описание объекта конфигурации. См. СтруктурыОписаний.ТаблицаОписанияОбъектовКонфигурации
//	ЗаписьConfiguration - ЗаписьXML - Поток записи описания
//
Процедура ЗарегистрироватьОбъектВКонфигурации(ОбъектКонфигурации, ЗаписьConfiguration) Экспорт

	ОбработкаXML.ЗаписатьЗначениеXML(ЗаписьConfiguration, ОбъектКонфигурации.Тип, ОбъектКонфигурации.Наименование);
	
КонецПроцедуры

// Записывает служебную информацию об уидах платформенных типов
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   ИмяОбъекта - Строка - Имя объекта конфигурации
//   ТипОбъекта - Строка - Тип объекта конфигурации, см ТипыОбъектовКонфигурации, ОбъектыКонфигурации.md
//
Процедура ЗаписатьПорождаемыеТипы(Запись, ИмяОбъекта, ТипОбъекта) Экспорт
	
	ПорождаемыеТипы = ТипыОбъектовКонфигурации.ОписаниеТипаПоИмени(ТипОбъекта).ПорождаемыеТипы;

	Если ПорождаемыеТипы.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запись.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Если ТипОбъекта = ТипыОбъектовКонфигурации.ИмяТипаПланОбмена() Тогда

		ОбработкаXML.ЗаписатьЗначениеXML(Запись, "xr:ThisNode", Строка(Новый УникальныйИдентификатор()));
		
	КонецЕсли;

	Для Каждого Тип Из ПорождаемыеТипы Цикл
		
		Запись.ЗаписатьНачалоЭлемента("xr:GeneratedType");
		// TODO Есть типы исключения у которых имя формируется по-другому
		Запись.ЗаписатьАтрибут("name", СтрШаблон("%1%2.%3", ТипОбъекта, Тип, ИмяОбъекта));
		Запись.ЗаписатьАтрибут("category", Тип);
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, "xr:TypeId", Строка(Новый УникальныйИдентификатор()));
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, "xr:ValueId", Строка(Новый УникальныйИдентификатор()));
		Запись.ЗаписатьКонецЭлемента();
	
	КонецЦикла;

	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Создает xml запись описания объекта, прописывает базовые параметры
//
// Параметры:
//  ТипОбъекта - Строка - Тип объекта конфигурации на английском, например, Catalog, Configuration и т.д.
//	ПараметрыГенерации - Структура - Общие данные/настройки необходимые для генерации 
//	ИмяФайла - Строка - Имя файла описания объекта, в который будут записаны данные
//
//  Возвращаемое значение:
//   ЗаписьXML- Поток записи описания
//
Функция СоздатьЗапись(ТипОбъекта, ПараметрыГенерации, ИмяФайла = Неопределено) Экспорт
	
	Запись = Новый ЗаписьXML();

	ПараметрыЗаписи = Новый ПараметрыЗаписиXML("UTF-8", , , , Символы.Таб);
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		
		Запись.ОткрытьФайл(ИмяФайла, ПараметрыЗаписи);
		
	Иначе
		
		Запись.УстановитьСтроку(ПараметрыЗаписи);
		
	КонецЕсли;
	
	Запись.ЗаписатьОбъявлениеXML();
	Запись.ЗаписатьНачалоЭлемента("MetaDataObject");
	Запись.ЗаписатьСоответствиеПространстваИмен("", "http://v8.1c.ru/8.3/MDClasses");
	Запись.ЗаписатьСоответствиеПространстваИмен("app", "http://v8.1c.ru/8.2/managed-application/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("cfg", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	Запись.ЗаписатьСоответствиеПространстваИмен("cmi", "http://v8.1c.ru/8.2/managed-application/cmi");
	Запись.ЗаписатьСоответствиеПространстваИмен("ent", "http://v8.1c.ru/8.1/data/enterprise");
	Запись.ЗаписатьСоответствиеПространстваИмен("lf", "http://v8.1c.ru/8.2/managed-application/logform");
	Запись.ЗаписатьСоответствиеПространстваИмен("style", "http://v8.1c.ru/8.1/data/ui/style");
	Запись.ЗаписатьСоответствиеПространстваИмен("sys", "http://v8.1c.ru/8.1/data/ui/fonts/system");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8ui", "http://v8.1c.ru/8.1/data/ui");
	Запись.ЗаписатьСоответствиеПространстваИмен("web", "http://v8.1c.ru/8.1/data/ui/colors/web");
	Запись.ЗаписатьСоответствиеПространстваИмен("win", "http://v8.1c.ru/8.1/data/ui/colors/windows");
	Запись.ЗаписатьСоответствиеПространстваИмен("xen", "http://v8.1c.ru/8.3/xcf/enums");
	Запись.ЗаписатьСоответствиеПространстваИмен("xpr", "http://v8.1c.ru/8.3/xcf/predef");
	Запись.ЗаписатьСоответствиеПространстваИмен("xr", "http://v8.1c.ru/8.3/xcf/readable");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	Запись.ЗаписатьАтрибут("version", ПараметрыГенерации.ВерсияВыгрузки);
	Запись.ЗаписатьНачалоЭлемента(ТипОбъекта);
	Запись.ЗаписатьАтрибут("uuid", Строка(Новый УникальныйИдентификатор()));
	
	Возврат Запись;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////////////////

#Область МетодыЗаписиЗначений

// Записывает значение формата многонациональная строка
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   Значение - Строка - Записываемое значение
//
Процедура МногоязычнаяСтрока(Запись, Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Запись.ЗаписатьНачалоЭлемента("v8:item");
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, "v8:lang", "ru");
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, "v8:content", Значение);
		Запись.ЗаписатьКонецЭлемента();
	
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда 
		
		Для Каждого Элемент Из Значение Цикл
			Запись.ЗаписатьНачалоЭлемента("v8:item");
			ОбработкаXML.ЗаписатьЗначениеXML(Запись, "v8:lang", Элемент.Ключ);
			ОбработкаXML.ЗаписатьЗначениеXML(Запись, "v8:content", Элемент.Значение);
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Записывает логическое значение
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   Значение - Булево - Записываемое значение
//
Процедура ЗначениеБулево(Запись, Значение) Экспорт

	Запись.ЗаписатьТекст(XMLСтрока(Значение));

КонецПроцедуры

// Записывает состав подсистемы
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   Значение - Массив - Коллекция объектов входящих в состав подсистемы
//
Процедура СоставПодсистемы(Запись, Значение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПолноеИмяЭлемента Из Значение Цикл
		
		ЧастиИмени = СтрРазделить(ПолноеИмяЭлемента, ".");
		
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, ЧастиИмени[0], ЧастиИмени[1]);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает информацию о подчиненных объектах
//
// Параметры:
//   Запись - ЗаписьXML - Поток записи
//   Значение - Массив - Коллекция подчиненных объектов
//
Процедура Подчиненные(Запись, Значение) Экспорт
	
	Запись.ЗаписатьНачалоЭлемента("ChildObjects");

	Для Каждого ПолноеИмяЭлемента Из Значение Цикл
		
		ЧастиИмени = СтрРазделить(ПолноеИмяЭлемента, ".");
		
		ОбработкаXML.ЗаписатьЗначениеXML(Запись, ЧастиИмени[0], ЧастиИмени[1]);
		
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////

Процедура СкопироватьInternalInfo(Запись, ИсходноеОписание)
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(ИсходноеОписание);
	
	Переносим = Ложь;
	
	Пока Чтение.Прочитать() И Чтение.Имя <> "InternalInfo" Цикл // Ищем секцию InternalInfo
		
	КонецЦикла;
	
	Если Чтение.Имя <> "InternalInfo" Тогда // Не нашли секцию
		
		Возврат;
		
	КонецЕсли;
	
	Запись.ЗаписатьНачалоЭлемента("InternalInfo");
	
	Пока Чтение.Прочитать() И Чтение.Имя <> "InternalInfo" Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Запись.ЗаписатьТекст(Строка(Новый УникальныйИдентификатор()));
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			Запись.ЗаписатьНачалоЭлемента(Чтение.Имя);
			
			Пока Чтение.СледующийАтрибут() Цикл
				
				Запись.ЗаписатьАтрибут(Чтение.Имя, Чтение.Значение);
				
			КонецЦикла;
			
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Запись.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Запись.ЗаписатьКонецЭлемента(); // InternalInfo
	
КонецПроцедуры

